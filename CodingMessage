#include <algorithm>
#include <cstddef>
#include <iostream>
#include <cmath>

using namespace std;

bool isPrime(int number);
int searchPrimeBetween(int top, int bottom);
int encode(char* orig, char* coded, int n);


int main()
{
    int n = searchPrimeBetween(40,30);
    int l = n % 26;
    cout << l << endl;
    char txt[30] = "This is one test string!";
    char* encodedTxt = new char[30];
    encode(txt, encodedTxt,l);
    cout << encodedTxt << endl;

   return 0;
}

bool isPrime(int number)
{
    if(number == 1)
    return true;
    else{
      for (int i = 2; i <= sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
      }
    }
    return true;
}//bool isPrime
int searchPrimeBetween(int top, int bottom)
{
    int i = bottom;
    for(i; i<= top; i++)
    {
        if(isPrime(i))
            break;

    }
    if(!isPrime(i))
    {
         cout << "Do not have prime numbers" << endl;
         return 0;
    }
    else
         return i;

}//searchPrimeBetween
int encode(char* orig, char* coded, int n) {
	char* ptr = orig;
	unsigned i = 0;
	while (*ptr != '\0') {
		if ((*ptr >= 'A' && *ptr <= 'Z') || (*ptr >= 'a' && *ptr <= 'z')) {
			if ((*ptr >= 'A' && *ptr <= 'Z' - n) || (*ptr >= 'a' && *ptr <= 'z' - n)) {
				coded[i++] = *ptr + n;
			}
			else {
                if(n == 0)
                coded[i++] = *ptr;
                else
				coded[i++] = *ptr - (26 - n);
			}
		}
		else {
			coded[i++] = *ptr;
		}
		ptr++;
	}
	coded[i] = '\0';
	return 0;
}
